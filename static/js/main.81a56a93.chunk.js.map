{"version":3,"sources":["redux/modules/auth/initialState.ts","redux/modules/auth/reducer.ts","redux/modules/services/initialState.ts","redux/modules/index.ts","redux/modules/services/reducer.ts","redux/store.ts","helpers/firebase/index.ts","components/app.module.css","redux/modules/auth/types.ts","components/App.tsx","serviceWorker.ts","index.tsx","redux/modules/services/types.ts"],"names":["InitialState","error","undefined","isFetching","authenticated","user","useFingerPrint","reducer","state","initialState","action","type","AuthActionConst","LOGOUT_FETCHING","LOGIN_FIREBASE_FETCHING","SIGN_UP_FIREBASE_FETCHING","LOGIN_FIREBASE_FULFILLED","uid","payload","email","password","meta","SIGN_UP_FIREBASE_FULFILLED","LOGOUT_FULFILLED","LOGOUT_REJECTED","LOGIN_FIREBASE_REJECTED","SIGN_UP_FIREBASE_REJECTED","message","statusCode","code","SET_FINGER_PRINT","REHYDRATE","auth","isEditing","isDeleting","isAdding","list","reducers","authReducer","services","ServicesActionConst","GET_SERVICES_FETCHING","ADD_SERVICES_FETCHING","EDIT_SERVICES_FETCHING","DELETE_SERVICES_FETCHING","GET_SERVICES_FULFILLED","ADD_SERVICES_FULFILLED","EDIT_SERVICES_FULFILLED","map","service","key","DELETE_SERVICES_FULFILLED","filter","GET_SERVICES_REJECTED","ADD_SERVICES_REJECTED","EDIT_SERVICES_REJECTED","DELETE_SERVICES_REJECTED","combineReducers","persistConfig","storage","whitelist","stateReconciler","autoMergeLevel2","pReducer","persistReducer","rootReducer","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","app","apiKey","process","authDomain","databaseURL","projectId","messagingSenderId","appId","storageBucket","measurementId","module","exports","Login","lazy","SignUp","Auth","Home","connect","props","history","useHistory","useEffect","Firebase","analytics","setUserId","replace","className","styles","fallback","size","color","loading","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","basename","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.81a56a93.chunk.js","sourcesContent":["import { AuthState } from './types';\n\nconst InitialState: AuthState = {\n  error: undefined,\n  isFetching: false,\n  authenticated: false,\n  user: undefined,\n  useFingerPrint: false,\n};\n\nexport default InitialState;","import initialState from './initialState';\nimport { Reducer } from 'redux';\nimport { AuthState, AuthActionConst } from './types';\nimport { REHYDRATE } from 'redux-persist';\n\nconst reducer: Reducer<AuthState, any> = (state = initialState, action): AuthState => {\n  switch (action.type) {\n    case AuthActionConst.LOGOUT_FETCHING:\n    case AuthActionConst.LOGIN_FIREBASE_FETCHING:\n    case AuthActionConst.SIGN_UP_FIREBASE_FETCHING:\n      return {\n        ...initialState,\n        isFetching: true,\n      }\n    case AuthActionConst.LOGIN_FIREBASE_FULFILLED:\n      return {\n        ...state,\n        isFetching: false,\n        authenticated: true,\n        user: {\n          uid: action.payload.user.uid,\n          email: action.payload.user.email,\n          password: action.meta,\n        }\n      }\n    case AuthActionConst.SIGN_UP_FIREBASE_FULFILLED:\n      return {\n        ...state,\n        isFetching: false,\n      }\n    case AuthActionConst.LOGOUT_FULFILLED:\n      return initialState;\n    case AuthActionConst.LOGOUT_REJECTED:\n    case AuthActionConst.LOGIN_FIREBASE_REJECTED:\n    case AuthActionConst.SIGN_UP_FIREBASE_REJECTED:\n      return {\n        ...state,\n        isFetching: false,\n        error: {\n          message: action.payload.message,\n          statusCode: action.payload.code,\n        },\n      };\n    case AuthActionConst.SET_FINGER_PRINT:\n      return {\n        ...state,\n        useFingerPrint: action.payload,\n      }\n    case REHYDRATE:\n      if(action && action.payload && action.payload.auth) {\n        return {\n          ...action.payload.auth,\n          isFetching: initialState.isFetching,\n        };\n      }\n      return {\n        ...state,\n        isFetching: initialState.isFetching,\n      };\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { ServicesState } from './types';\n\nconst InitialState: ServicesState = {\n  error: undefined,\n  isFetching: false,\n  isEditing: false,\n  isDeleting: false,\n  isAdding: false,\n  list: [],\n};\n\nexport default InitialState;","import { combineReducers, ReducersMapObject } from 'redux';\nimport authReducer from './auth/reducer';\nimport servicesReducer from './services/reducer';\nimport { AuthState, ActionsType as AuthActions } from './auth/types';\nimport { ServicesState, ActionsType as ServicesActions } from './services/types';\n\nexport interface DVPState {\n  auth: AuthState;\n  services: ServicesState;\n}\n\nexport type RootAction = AuthActions | ServicesActions\n\nconst reducers: ReducersMapObject<DVPState> = {\n  auth: authReducer,\n  services: servicesReducer,\n};\n\nexport default combineReducers<DVPState>(reducers);\n","import initialState from './initialState';\nimport { Reducer } from 'redux';\nimport { ServicesState, ServicesActionConst } from './types';\nimport { AuthActionConst } from 'redux/modules/auth/types';\nimport { REHYDRATE } from 'redux-persist';\n\nconst reducer: Reducer<ServicesState, any> = (state = initialState, action): ServicesState => {\n  switch (action.type) {\n    case ServicesActionConst.GET_SERVICES_FETCHING:\n      return {\n        ...state,\n        isFetching: true,\n      }\n    case ServicesActionConst.ADD_SERVICES_FETCHING:\n      return {\n        ...state,\n        isAdding: true,\n      }\n    case ServicesActionConst.EDIT_SERVICES_FETCHING:\n      return {\n        ...state,\n        isEditing: true,\n      }\n    case ServicesActionConst.DELETE_SERVICES_FETCHING:\n      return {\n        ...state,\n        isDeleting: true,\n      }\n    case ServicesActionConst.GET_SERVICES_FULFILLED:  \n      return {\n        ...state,\n        isFetching: false,\n        list: action.payload,\n      }\n    case ServicesActionConst.ADD_SERVICES_FULFILLED:\n      return {\n        ...state,\n        isAdding: true,\n        list: [\n          ...state.list,\n          action.payload\n        ]\n      }\n    case ServicesActionConst.EDIT_SERVICES_FULFILLED:\n      return {\n        ...state,\n        isEditing: true,\n        list: state.list.map((service) => {\n          if(service.key === action.payload.key) {\n            return action.payload\n          }\n          return service\n        })\n      }\n    case ServicesActionConst.DELETE_SERVICES_FULFILLED:\n      return {\n        ...state,\n        isDeleting: false,\n        list: state.list.filter((service) => service.key !== action.payload)\n      }\n    case ServicesActionConst.GET_SERVICES_REJECTED:\n    case ServicesActionConst.ADD_SERVICES_REJECTED:\n    case ServicesActionConst.EDIT_SERVICES_REJECTED:\n    case ServicesActionConst.DELETE_SERVICES_REJECTED:\n      return {\n        ...state,\n        isFetching: false,\n        isEditing: false,\n        isDeleting: false,\n        isAdding: false,\n        error: {\n          message: action.payload.message,\n          statusCode: action.payload.code,\n        },\n      };\n    case AuthActionConst.LOGOUT_FULFILLED:\n      return initialState;\n    case REHYDRATE: \n      return {\n        ...state,\n        list: action.payload?.services?.list || []\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer","import {\n  createStore,\n  applyMiddleware,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer, { DVPState } from './modules';\nimport thunk from 'redux-thunk';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['auth', 'services'],\n  stateReconciler: autoMergeLevel2,\n};\n\nconst pReducer = persistReducer<DVPState>(persistConfig, rootReducer);\n\nconst middleware = [\n  thunk,\n]\n\nexport const store = createStore(\n  pReducer,\n  composeWithDevTools(applyMiddleware(...middleware)\n));\n\nexport const persistor = persistStore(store);","import * as app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport '@firebase/firestore'\nimport 'firebase/analytics';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n};\n\napp.initializeApp(firebaseConfig);\n\nexport default { app };\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__1F5XI\"};","import { ActionType } from 'typesafe-actions';\nimport * as actions from './actions';\n\nexport interface AuthState {\n  isFetching: boolean;\n  authenticated: boolean;\n  error?: Error;\n  useFingerPrint: boolean;\n  user?: {\n    password: string;\n    email: string;\n    uid: string;\n  }\n}\n\nexport interface Error {\n  message: string;\n  statusCode: number | string;\n}\n\nexport interface FirebaseError {\n  message: string;\n  code: string;\n}\n\nexport interface LoginParams {\n  email: string;\n  password: string;\n}\n\nexport type ActionsType = ActionType<typeof actions>;\n\nexport enum AuthActionConst {\n  LOGIN_FIREBASE_FETCHING = 'LOGIN_FIREBASE_FETCHING',\n  LOGIN_FIREBASE_FULFILLED = 'LOGIN_FIREBASE_FULFILLED',\n  LOGIN_FIREBASE_REJECTED = 'LOGIN_FIREBASE_REJECTED',\n  LOGOUT_FULFILLED = 'LOGOUT_FULFILLED',\n  LOGOUT_REJECTED = 'LOGOUT_REJECTED',\n  LOGOUT_FETCHING = 'LOGOUT_FETCHING',\n  SET_FINGER_PRINT = 'SET_FINGER_PRINT',\n  SIGN_UP_FIREBASE_FETCHING = 'SIGN_UP_FIREBASE_FETCHING',\n  SIGN_UP_FIREBASE_FULFILLED = 'SIGN_UP_FIREBASE_FULFILLED',\n  SIGN_UP_FIREBASE_REJECTED = 'SIGN_UP_FIREBASE_REJECTED',\n}","import React, { useEffect, Suspense, lazy } from 'react';\nimport {\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\nimport { connect } from  'react-redux';\nimport { DVPState } from 'redux/modules';\nimport PulseLoader from 'react-spinners/PulseLoader'\nimport Firebase from 'helpers/firebase';\nimport styles from './app.module.css';\n\nconst Login = lazy(() => import('components/login'));\nconst SignUp = lazy(() => import('components/sign-up'));\nconst Auth = lazy(() => import('components/auth'));\nconst Home = lazy(() => import('components/home'));\n\ninterface Props {\n  readonly user: DVPState['auth']['user'];\n  readonly authenticated: DVPState['auth']['authenticated'];\n}\n\nexport const App = (props: Props) => {\n  const { authenticated, user } = props\n  const history = useHistory();\n\n  useEffect(() => {\n    if(authenticated) {\n      if(user) {\n        Firebase.app.analytics().setUserId(user.email)\n      }\n      history.replace('/auth')\n    } else {\n      history.replace('/login')\n    }\n  }, [authenticated, history, user])\n\n  return (\n    <div className={styles.app}>\n      <Switch>\n        <Suspense fallback={<PulseLoader size={15} color={'#292724'} loading />}>\n          <Route exact path=\"/auth\" component={Auth} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/sign-up\" component={SignUp} />\n          <Route exact path=\"/home\" component={Home} />\n        </Suspense>\n      </Switch>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: DVPState) => ({\n  user: state.auth.user,\n  authenticated: state.auth.authenticated,\n})\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <App />\n        </Router>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n","import { ActionType } from 'typesafe-actions';\nimport * as actions from './actions';\n\nexport interface ServicesState {\n  isFetching: boolean;\n  isDeleting: boolean;\n  isEditing: boolean;\n  isAdding: boolean;\n  list: Service[];\n  error?: Error;\n}\n\nexport interface Error {\n  message: string;\n  statusCode: number | string;\n}\n\nexport interface Service {\n  key?: string;\n  name: string;\n  username: string;\n  password: string;\n  link?: string;\n  note?: string;\n  encrypted?: boolean;\n}\n\nexport type ActionsType = ActionType<typeof actions>;\n\nexport enum ServicesActionConst {\n  GET_SERVICES_FULFILLED = 'GET_SERVICES_FULFILLED',\n  GET_SERVICES_REJECTED = 'GET_SERVICES_REJECTED',\n  GET_SERVICES_FETCHING = 'GET_SERVICES_FETCHING',\n  EDIT_SERVICES_FULFILLED = 'EDIT_SERVICES_FULFILLED',\n  EDIT_SERVICES_REJECTED = 'EDIT_SERVICES_REJECTED',\n  EDIT_SERVICES_FETCHING = 'EDIT_SERVICES_FETCHING',\n  DELETE_SERVICES_FULFILLED = 'DELETE_SERVICES_FULFILLED',\n  DELETE_SERVICES_REJECTED = 'DELETE_SERVICES_REJECTED',\n  DELETE_SERVICES_FETCHING = 'DELETE_SERVICES_FETCHING',\n  ADD_SERVICES_FULFILLED = 'ADD_SERVICES_FULFILLED',\n  ADD_SERVICES_REJECTED = 'ADD_SERVICES_REJECTED',\n  ADD_SERVICES_FETCHING = 'ADD_SERVICES_FETCHING',\n}"],"sourceRoot":""}