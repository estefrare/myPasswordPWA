{"version":3,"sources":["redux/modules/auth/types.ts","redux/modules/auth/initialState.ts","redux/modules/auth/reducer.ts","redux/modules/services/initialState.ts","redux/modules/index.ts","redux/modules/services/reducer.ts","redux/store.ts","components/app.module.css","redux/modules/services/types.ts","helpers/webauth/index.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["AuthActionConst","InitialState","error","undefined","isFetching","authenticated","user","reducer","state","initialState","action","type","LOGOUT_FETCHING","LOGIN_FIREBASE_FETCHING","LOGIN_FIREBASE_FULFILLED","uid","payload","email","LOGOUT_FULFILLED","LOGOUT_REJECTED","LOGIN_FIREBASE_REJECTED","message","statusCode","code","isEditing","isDeleting","list","reducers","auth","authReducer","services","ServicesActionConst","GET_SERVICES_FETCHING","ADD_SERVICES_FETCHING","EDIT_SERVICES_FETCHING","DELETE_SERVICES_FETCHING","GET_SERVICES_FULFILLED","ADD_SERVICES_FULFILLED","EDIT_SERVICES_FULFILLED","DELETE_SERVICES_FULFILLED","GET_SERVICES_REJECTED","ADD_SERVICES_REJECTED","EDIT_SERVICES_REJECTED","DELETE_SERVICES_REJECTED","combineReducers","persistConfig","key","storage","whitelist","stateReconciler","autoMergeLevel2","pReducer","persistReducer","rootReducer","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","module","exports","webAuthnSignup","publicKeyCredentialCreationOptions","challenge","Uint8Array","from","c","charCodeAt","rp","name","id","displayName","pubKeyCredParams","alg","authenticatorSelection","authenticatorAttachment","timeout","attestation","navigator","credentials","create","publicKey","Login","lazy","Home","connect","props","history","useHistory","useEffect","replace","className","styles","app","fallback","size","color","loading","exact","path","component","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","basename","process","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fb763f64.chunk.js","sourcesContent":["import { ActionType } from 'typesafe-actions';\nimport * as actions from './actions';\n\nexport interface AuthState {\n  isFetching: boolean;\n  authenticated: boolean;\n  error?: Error;\n  user?: {\n    email: string;\n    uid: string;\n  }\n}\n\nexport interface Error {\n  message: string;\n  statusCode: number | string;\n}\n\nexport interface FirebaseError {\n  message: string;\n  code: string;\n}\n\nexport interface LoginParams {\n  email: string;\n  password: string;\n}\n\nexport type ActionsType = ActionType<typeof actions>;\n\nexport enum AuthActionConst {\n  LOGIN_FIREBASE_FETCHING = 'LOGIN_FIREBASE_FETCHING',\n  LOGIN_FIREBASE_FULFILLED = 'LOGIN_FIREBASE_FULFILLED',\n  LOGIN_FIREBASE_REJECTED = 'LOGIN_FIREBASE_REJECTED',\n  LOGOUT_FULFILLED = 'LOGOUT_FULFILLED',\n  LOGOUT_REJECTED = 'LOGOUT_REJECTED',\n  LOGOUT_FETCHING = 'LOGOUT_FETCHING',\n}","import { AuthState } from './types';\n\nconst InitialState: AuthState = {\n  error: undefined,\n  isFetching: false,\n  authenticated: false,\n  user: undefined,\n};\n\nexport default InitialState;","import initialState from './initialState';\nimport { Reducer } from 'redux';\nimport { AuthState, AuthActionConst } from './types';\n\nconst reducer: Reducer<AuthState, any> = (state = initialState, action): AuthState => {\n  switch (action.type) {\n    case AuthActionConst.LOGOUT_FETCHING:\n    case AuthActionConst.LOGIN_FIREBASE_FETCHING:\n      return {\n        ...initialState,\n        isFetching: true,\n      }\n    case AuthActionConst.LOGIN_FIREBASE_FULFILLED:\n      return {\n        ...state,\n        isFetching: false,\n        authenticated: true,\n        user: {\n          uid: action.payload.user.uid,\n          email: action.payload.user.email,\n        }\n      }\n    case AuthActionConst.LOGOUT_FULFILLED:\n      return initialState;\n    case AuthActionConst.LOGOUT_REJECTED:\n    case AuthActionConst.LOGIN_FIREBASE_REJECTED:\n      return {\n        ...state,\n        isFetching: false,\n        error: {\n          message: action.payload.message,\n          statusCode: action.payload.code,\n        },\n      };\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { ServicesState } from './types';\n\nconst InitialState: ServicesState = {\n  error: undefined,\n  isFetching: false,\n  isEditing: false,\n  isDeleting: false,\n  list: [],\n};\n\nexport default InitialState;","import { combineReducers, ReducersMapObject } from 'redux';\nimport authReducer from './auth/reducer';\nimport servicesReducer from './services/reducer';\nimport { AuthState, ActionsType as AuthActions } from './auth/types';\nimport { ServicesState, ActionsType as ServicesActions } from './services/types';\n\nexport interface DVPState {\n  auth: AuthState;\n  services: ServicesState;\n}\n\nexport type RootAction = AuthActions | ServicesActions\n\nconst reducers: ReducersMapObject<DVPState> = {\n  auth: authReducer,\n  services: servicesReducer,\n};\n\nexport default combineReducers<DVPState>(reducers);\n","import initialState from './initialState';\nimport { Reducer } from 'redux';\nimport { ServicesState, ServicesActionConst } from './types';\n\nconst reducer: Reducer<ServicesState, any> = (state = initialState, action): ServicesState => {\n  switch (action.type) {\n    case ServicesActionConst.GET_SERVICES_FETCHING:\n    case ServicesActionConst.ADD_SERVICES_FETCHING:\n      return {\n        ...state,\n        isFetching: true,\n      }\n    case ServicesActionConst.EDIT_SERVICES_FETCHING:\n      return {\n        ...state,\n        isEditing: true,\n      }\n    case ServicesActionConst.DELETE_SERVICES_FETCHING:\n      return {\n        ...state,\n        isDeleting: true,\n      }\n    case ServicesActionConst.GET_SERVICES_FULFILLED:  \n      return {\n        ...state,\n        isFetching: false,\n        list: action.payload,\n      }\n    case ServicesActionConst.ADD_SERVICES_FULFILLED:\n      return {\n        ...state,\n        isFetching: false,\n      }\n    case ServicesActionConst.EDIT_SERVICES_FULFILLED:\n      return {\n        ...state,\n        isEditing: true,\n      }\n    case ServicesActionConst.DELETE_SERVICES_FULFILLED:\n      return {\n        ...state,\n        isDeleting: false,\n      }\n    case ServicesActionConst.GET_SERVICES_REJECTED:\n    case ServicesActionConst.ADD_SERVICES_REJECTED:\n    case ServicesActionConst.EDIT_SERVICES_REJECTED:\n    case ServicesActionConst.DELETE_SERVICES_REJECTED:\n      return {\n        ...state,\n        isFetching: false,\n        isEditing: false,\n        isDeleting: false,\n        error: {\n          message: action.payload.message,\n          statusCode: action.payload.code,\n        },\n      };\n    default:\n      return state\n  }\n}\n\nexport default reducer","import {\n  createStore,\n  applyMiddleware,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer, { DVPState } from './modules';\nimport thunk from 'redux-thunk';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['auth'],\n  stateReconciler: autoMergeLevel2,\n};\n\nconst pReducer = persistReducer<DVPState>(persistConfig, rootReducer);\n\nconst middleware = [\n  thunk,\n]\n\nexport const store = createStore(\n  pReducer,\n  composeWithDevTools(applyMiddleware(...middleware)\n));\n\nexport const persistor = persistStore(store);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__1F5XI\"};","import { ActionType } from 'typesafe-actions';\nimport * as actions from './actions';\n\nexport interface ServicesState {\n  isFetching: boolean;\n  isDeleting: boolean;\n  isEditing: boolean;\n  list: Service[];\n  error?: Error;\n}\n\nexport interface Error {\n  message: string;\n  statusCode: number | string;\n}\n\nexport interface Service {\n  key?: string;\n  name: string;\n  username: string;\n  password: string;\n  link?: string;\n  note?: string;\n}\n\nexport type ActionsType = ActionType<typeof actions>;\n\nexport enum ServicesActionConst {\n  GET_SERVICES_FULFILLED = 'GET_SERVICES_FULFILLED',\n  GET_SERVICES_REJECTED = 'GET_SERVICES_REJECTED',\n  GET_SERVICES_FETCHING = 'GET_SERVICES_FETCHING',\n  EDIT_SERVICES_FULFILLED = 'EDIT_SERVICES_FULFILLED',\n  EDIT_SERVICES_REJECTED = 'EDIT_SERVICES_REJECTED',\n  EDIT_SERVICES_FETCHING = 'EDIT_SERVICES_FETCHING',\n  DELETE_SERVICES_FULFILLED = 'DELETE_SERVICES_FULFILLED',\n  DELETE_SERVICES_REJECTED = 'DELETE_SERVICES_REJECTED',\n  DELETE_SERVICES_FETCHING = 'DELETE_SERVICES_FETCHING',\n  ADD_SERVICES_FULFILLED = 'ADD_SERVICES_FULFILLED',\n  ADD_SERVICES_REJECTED = 'ADD_SERVICES_REJECTED',\n  ADD_SERVICES_FETCHING = 'ADD_SERVICES_FETCHING',\n}","export const webAuthnSignup = () => {\n  const publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions = {\n    // Challenge shoulda come from the server\n    challenge: Uint8Array.from('someChallengeIsHereComOn', c => c.charCodeAt(0)),\n    rp: {\n      name: 'WebAuthn Test',\n      // id: 'localhost:4200',\n    },\n    user: {\n      // Some user id coming from the server\n      id: Uint8Array.from('123', (c: any) => c.charCodeAt(0)),\n      name: 'frare.esteban@gmail.com',\n      displayName: 'frare.esteban@gmail.com',\n    },\n    pubKeyCredParams: [{ alg: -7, type: 'public-key' }],\n    authenticatorSelection: {\n      authenticatorAttachment: 'platform',\n      // requireResidentKey: true,\n    },\n    timeout: 60000,\n    attestation: 'direct'\n  };\n\n  return navigator.credentials.create({\n    publicKey: publicKeyCredentialCreationOptions,\n  });\n}","import React, { useEffect, Suspense, lazy } from 'react';\nimport {\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\nimport { connect } from  'react-redux';\nimport { DVPState } from 'redux/modules';\nimport PulseLoader from 'react-spinners/PulseLoader'\nimport styles from './app.module.css';\n\nimport { webAuthnSignup } from 'helpers/webauth'\n\nconst Login = lazy(() => import('components/login'));\nconst Home = lazy(() => import('components/home'));\n\ninterface Props {\n  readonly authenticated: DVPState['auth']['authenticated'];\n}\n\nexport const App = (props: Props) => {\n  const { authenticated } = props\n  const history = useHistory();\n\n  useEffect(() => {\n    if(authenticated) {\n      // history.replace('/home')\n    } else {\n      history.replace('/login')\n    }\n  }, [authenticated, history])\n\n  return (\n    <div className={styles.app}>\n      <Switch>\n        <Suspense fallback={<PulseLoader size={15} color={'#292724'} loading />}>\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/test\">\n            <button onClick={webAuthnSignup}>test</button>\n          </Route>\n          <Route exact path=\"/home\" component={Home} />\n        </Suspense>\n      </Switch>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: DVPState) => ({ authenticated: state.auth.authenticated })\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <App />\n        </Router>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}